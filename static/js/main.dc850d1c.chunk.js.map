{"version":3,"sources":["components/RandomQuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["RandomQuoteMachine","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getRndInteger","min","max","Math","floor","random","setStateIndex","indexQuoteAndAuthor","quoteAndAuthor","length","setState","index","setStateColor","indexColor","color","state","generateNewQuote","bind","assertThisInitialized","inherits","createClass","key","value","react_default","a","createElement","id","concat","class","quote","author","href","role","title","type","onClick","Component","App","className","components_RandomQuoteMachine","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc850d1c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport class RandomQuoteMachine extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            index: 0, \n            color: 'rgba(197, 197, 197, 0.66)'\n        };\n        this.generateNewQuote = this.generateNewQuote.bind(this);\n    }\n\n    getRndInteger = (min, max) => {\n        return Math.floor(Math.random() * (max - min + 1) ) + min;\n    };\n\n    setStateIndex = () => {\n        let indexQuoteAndAuthor = this.getRndInteger(0, this.props.quoteAndAuthor.length-1);\n        this.setState({index: indexQuoteAndAuthor});\n    };\n\n    setStateColor = () => {\n        let indexColor = this.getRndInteger(0, this.props.color.length-1);\n        this.setState({color: this.props.color[indexColor]});\n    };\n\n    generateNewQuote() {\n        this.setStateIndex();\n        this.setStateColor();\n    };\n\n    render () {\n        return (\n            <div id=\"quote-box\">\n                <style>\n                {`\n                    :root {\n                        --qm-color: ${this.state.color};\n                    }\n                `}\n                </style>\n                <div id=\"quote-text\">\n                    <span class=\"fa fa-quote-left\"></span>\n                    <span id=\"text\">  {this.props.quoteAndAuthor[this.state.index].quote}</span>\n                    <p id=\"quote-author\">\n                        <span>- </span><span id=\"author\">{this.props.quoteAndAuthor[this.state.index].author}</span>\n                    </p>\n                </div>\n                <div></div>\n                <div id=\"quote-buttons\">\n                    <a href=\"twitter.com/intent/tweet\" class=\"btn btn-info\" id=\"tweet-quote\" role=\"button\"\n                       title=\"Tweet this quote!\">\n                        <span class=\"fab fa-twitter\"></span>\n                    </a>\n                    <span>  </span>\n                    <button type=\"button\" class=\"btn btn-info\" id=\"new-quote\" onClick={this.generateNewQuote}>New Quote</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default RandomQuoteMachine;","import React from 'react';\nimport './App.css';\nimport RandomQuoteMachine from './components/RandomQuoteMachine';\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/ \n\nvar quoteAndAuthor = [\n  {quote: \"Be yourself; everyone else is already taken.\",\n      author: \"Oscar Wilde\"},\n  {quote: \"Two things are infinite: the universe and human stupidity; and I'm not sure about the universe.\",\n      author:\"Albert Einstein\"},\n  {quote: \"Be the change that you wish to see in the world.\",\n      author: \"Mahatma Gandhi\"},\n  {quote: \"If you want to know what a man's like, take a good look at how he treats his inferiors, not his equals.\",\n      author: \"J.K. Rowling, Harry Potter and the Goblet of Fire\"},\n  {quote: \"If you tell the truth, you don't have to remember anything.\",\n      author: \"Mark Twain\"},\n  {quote: \"Always forgive your enemies; nothing annoys them so much.\",\n      author: \"Oscar Wilde\"},\n  {quote: \"Certain things catch your eye, but pursue only those that capture the heart.\",\n      author: \"Ancient Indian Proverb\"},\n  {quote: \"Impossible is just a big word thrown around by small men who find it easier to live in the world \" +\n          \"they've been given than to explore the power they have to change it. Impossible is not a fact. It's \" +\n          \"an opinion. Impossible is not a declaration. It's a dare. Impossible is potential. Impossible is \" +\n          \"temporary. Impossible is nothing.\",\n      author: \"Muhammad Ali\"},\n  {quote: \"You miss 100% of the shots you donâ€™t take.\",\n      author:\"Wayne Gretzky\"},\n  {quote: \"Ask and it will be given to you; search, and you will find; knock and the door will be opened for you.\",\n      author:\"Jesus\"}\n  ];\n\nvar color = [\"black\", \"green\", \"lime\", \"blue\", \"red\", \"grey\", \"orange\", \"purple\", \"lightblue\"];\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <RandomQuoteMachine quoteAndAuthor={quoteAndAuthor} color={color}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}